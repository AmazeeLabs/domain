<?php

// $Id$

/**
 * @file
 * Domain manager configuration options.
 *
 * For this module to work correctly, you will need to follow the INSTALL.txt 
 * instructions for editing your settings.php file.
 */

/**
 * Implements hook_menu()
 *
 * @ingroup drupal
 */
function domain_conf_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Domain site settings'),
      'path' => 'admin/build/domain/conf',
      'access' => user_access('administer domains'),
      'type' => MENU_CALLBACK,
      'callback' => 'domain_conf_page',
      'callback arguments' => array(arg(4))      
    );    
  }
  return $items;
}

/**
 * The domain conf page callback router.
 *
 * @param $domain_id
 *  The unique identifier for this domain, taken from {domain}.
 *
 * @ingroup conf
 */
function domain_conf_page($domain_id) {
  global $_domain;
  $domain = domain_lookup($domain_id);
  if ($domain['domain_id']) {
    // Ensure we are on the proper domain.
    domain_goto($domain);
    drupal_set_title(t('!site : Domain site settings', array('!site' => $domain['sitename'])));
    return drupal_get_form('system_site_information_settings');
  }
  else {
    return t('Invalid domain request.');
  } 
}

/**
 * Implements hook_domainlinks()
 *
 * @ingroup conf
 */
function domain_conf_domainlinks($domain) {
  $links[] = array(
    'title' => t('settings'),
    'path' => 'admin/build/domain/conf/'. $domain['domain_id']
  );
  return $links;
}

/**
 * Implements hook_form_alter()
 *
 * Since this function is only loaded at the path admin/build/domain/conf, we
 * don't have to worry about hook_form_alter() being called when not wanted.
 *
 * @ingroup conf
 */
function domain_conf_form_alter($form_id, &$form) {
  // Set a message if we are on an admin page.
  domain_conf_warning();
  // We use the system_site_information_settings form as a base, and add the elements we need
  // from other forms.  The default values are altered based on stored settings.
  if ($form_id == 'system_site_information_settings') {
    // Check to be certain that we are on the right form page.
    $module = arg(2);
    $action = arg(3);
    if ($module == 'domain' && $action == 'conf') {
      $domain_id = arg(4);
      $domain = domain_lookup($domain_id);  
      $data = db_result(db_query("SELECT settings FROM {domain_conf} WHERE domain_id = %d", $domain['domain_id']));
      if (!empty($data)) {
        $settings = unserialize($data);
      }
      else {
        $settings = array();
      }
      $unset = array('buttons', '#submit');
      foreach ($unset as $key) {
        unset($form[$key]);
      }
      $form['main'] = array(
        '#type' => 'fieldset',
        '#title' => t('Domain information'),
        '#collapsible' => TRUE,
        '#weight' => -10
      );    
      // Put the defaults in the fieldset
      $fields = array('site_name', 'site_mail', 'site_slogan', 'site_mission', 'site_footer', 'site_frontpage', 'anonymous', 'xcoord', 'ycoord');
      foreach ($fields as $field) {
        $form['main'][$field] = $form[$field];
        unset($form[$field]);
      }

      // Change the path for the frontpage.
      $prefix = $form['main']['site_frontpage']['#field_prefix'];
      $_path = parse_url($prefix);    
      $str = $_path['host'];
      $fix = preg_replace("/$str/", $domain['subdomain'], $prefix, 1);
      $form['main']['site_frontpage']['#field_prefix'] = $fix;
      
      // Date settings: set the default timezone
      $form['date'] = array(
        '#type' => 'fieldset',
        '#title' => t('Timezone settings'),
        '#collapsible' => TRUE,
        '#weight' => -5
      );  
      $zones = _system_zonelist();    
      $form['date']['date_default_timezone'] = array(
        '#type' => 'select',
        '#title' => t('Default time zone'),
        '#default_value' => isset($settings['date_default_timezone']) ? $settings['date_default_timezone'] :variable_get('date_default_timezone', 0),
        '#options' => $zones,
        '#description' => t('Select the default site time zone.')
      );    
      
      // File system settings -- this is untested!
      $form['file'] = array(
        '#type' => 'fieldset',
        '#title' => t('File upload settings'),
        '#collapsible' => TRUE,
        '#weight' => 0
      );      
      $form['file']['file_directory_path'] = array(
        '#type' => 'textfield',
        '#title' => t('File system path'),
        '#default_value' => file_directory_path(),
        '#maxlength' => 255,
        '#description' => t('A file system path where the files will be stored. This directory has to exist and be writable by Drupal. If the download method is set to public this directory has to be relative to the Drupal installation directory, and be accessible over the web. When download method is set to private this directory should not be accessible over the web. Changing this location after the site has been in use will cause problems so only change this setting on an existing site if you know what you are doing.'),
        '#after_build' => array('system_check_directory'),
      );
      $form['file']['file_directory_temp'] = array(
        '#type' => 'textfield',
        '#title' => t('Temporary directory'),
        '#default_value' => file_directory_temp(),
        '#maxlength' => 255,
        '#description' => t('Location where uploaded files will be kept during previews. Relative paths will be resolved relative to the Drupal installation directory.'),
        '#after_build' => array('system_check_directory'),
      );
      // Offline notices.
      $form['offline'] = array(
        '#type' => 'fieldset',
        '#title' => t('Maintenance settings'),
        '#collapsible' => TRUE,
        '#weight' => 5
      );      
      $form['offline']['site_offline'] = array(
        '#type' => 'radios',
        '#title' => t('Site status'),
        '#default_value' => isset($settings['site_offline']) ? $settings['site_offline'] :variable_get('site_offline', 0),
        '#options' => array(t('Online'), t('Off-line')),
        '#description' => t('When set to "Online", all visitors will be able to browse your site normally. When set to "Off-line", only users with the "administer site configuration" permission will be able to access your site to perform maintenance; all other visitors will see the site off-line message configured below. Authorized users can log in during "Off-line" mode directly via the <a href="@user-login">user login</a> page.', array('@user-login' => url('user'))),
      );
    
      $form['offline']['site_offline_message'] = array(
        '#type' => 'textarea',
        '#title' => t('Site off-line message'),
        '#default_value' => isset($settings['site_offline_message']) ? $settings['site_offline_message'] : variable_get('site_offline_message', t('@site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('@site' => $domain['sitename']))),
        '#description' => t('Message to show visitors when the site is in off-line mode.')
      );    
      
      // Site name must be edited at the domain creation screen.
      $form['main']['site_name']['#disabled'] = TRUE;
      $form['main']['site_name']['#description'] = t('The name of this web site, as entered in the <a href="!url">domain-specific settings</a>.', array('!url' => url('admin/build/domain/edit/'. $domain['domain_id'])));

      // Reset the provided form defaults, if needed
      $form['main']['site_name']['#default_value'] = $domain['sitename'];
      $form['main']['site_mail']['#default_value'] = isset($settings['site_mail']) ? $settings['site_mail'] : variable_get('site_mail', ini_get('sendmail_from'));
      $form['main']['site_slogan']['#default_value'] = isset($settings['site_slogan']) ? $settings['site_slogan'] : variable_get('site_slogan', '');    
      $form['main']['site_mission']['#default_value'] = isset($settings['site_mission']) ? $settings['site_mission'] : variable_get('site_mission', '');    
      $form['main']['site_footer']['#default_value'] = isset($settings['site_footer']) ? $settings['site_footer'] : variable_get('site_footer', '');    
      $form['main']['site_frontpage']['#default_value'] = isset($settings['site_frontpage']) ? $settings['site_frontpage'] : variable_get('site_frontpage', 'node');    
      $form['main']['anonymous']['#default_value'] = isset($settings['anonymous']) ? $settings['anonymous'] : variable_get('anonymous', t('Guest'));    
      
      // Domain information, for saving.
      $form['domain_id'] = array('#type' => 'value', '#value' => $domain['domain_id']);
  
      // Submit functions
      $form['#submit']['domain_conf_form_submit'] = array();
      $form['#validate']['domain_conf_form_validate'] = array();      
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save domain settings'),
        '#weight' => 10
      );    
    }  
  }
}

/**
 * FormsAPI
 *
 * @ingroup conf
 */
function domain_conf_form_submit($form_id, $form_values) {
  // Throw away what we don't need.
  $settings = $form_values;
  $unset = array('form_token', 'form_id', 'op', 'submit');
  foreach ($unset as $key) {
    unset($settings[$key]);
  }
  // INSERT or UPDATE?
  $check = db_result(db_query("SELECT domain_id FROM {domain_conf} WHERE domain_id = %d", $form_values['domain_id']));  
  if ($check) {
    $sql = "UPDATE {domain_conf} SET settings = %b WHERE domain_id = %d";
    db_query($sql, serialize($settings), $form_values['domain_id']);
  }
  else {
    $sql = "INSERT INTO {domain_conf} VALUES (%d, %b)"; 
    db_query($sql, $form_values['domain_id'], serialize($settings));
  }
  drupal_set_message(t('Domain options saved successfully.'));
}

/**
 * Sets a message to the site admin.
 *
 * If our module changes $conf settings, they may be reflected 
 * on admin pages when we don't want them to be.
 *
 * @ingroup conf
 */
function domain_conf_warning() {
  static $_warning;
  if (empty($_warning)) {
    global $_domain;
    $arg = arg(0);
    $type = arg(1);
    $module = arg(2);
    $action = arg(3);
    // The default domain has domain_id zero.
    if ($arg == 'admin' && $module != 'domain' && $_domain['domain_id'] != 0) {
      $default = domain_default();
      $_path = domain_get_uri($default);
      drupal_set_message(t('You are viewing #this. This form may need to be entered from <a href="!url">!domain</a>', array('#this' => $_domain['subdomain'], '!url' => $_path, '!domain' => $default['subdomain'])));
    }
    $_warning = TRUE;
  }  
}

/**
 * Implements hook_domaininstall()
 */
function domain_conf_domaininstall() {
  // If Domain Conf is being used, check to see that it is installed correctly.
  if (module_exists('domain_conf') && !function_exists('_domain_conf_load')) {
    drupal_set_message(t('The Domain Configuration module is not installed correctly.  Please edit your settings.php file as described in <a href="!url">INSTALL.txt</a>', array('!url' => drupal_get_path('module', 'domain_conf') .'/INSTALL.txt')));
  }
}