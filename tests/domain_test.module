<?php
// $id$

/**
 * @file
 *   Test module for Domain Access hooks.
 */

/**
 * Store static variables to indicate that hooks fired.
 */
function domain_test_set($value = NULL) {
  static $storage;
  if (is_null($value) && isset($storage)) {
    return $storage;
  }
  $storage = $value;
}

/**
 * Get the static value.
 */
function domain_test_get() {
  return domain_test_set();
}

/**
 * Implements hook_domain_load().
 *
 * Add a 'test' variable to the domain array.
 */
function domain_test_domain_load(&$domain) {
  // Add a variable to the $domain array.
  $domain['testvar'] = TRUE;
}

/**
 * Implements hook_domain_insert().
 *
 * Change the sitename value to 'foobar'.
 */
function domain_test_domain_insert($domain, $form_values = array()) {
  if ($domain['sitename'] == 'testfoo') {
    db_update('domain')
      ->fields(array('sitename' => 'foobar'))
      ->condition('domain_id', $domain['domain_id'])
      ->execute();
  }
}

/**
 * Implements hook_domain_update().
 *
 * Change the sitename value to 'testfoo'.
 */
function domain_test_domain_update($domain, $form_values = array()) {
  if ($domain['sitename'] == 'foobar') {
    db_update('domain')
      ->fields(array('sitename' => 'testfoo'))
      ->condition('domain_id', $domain['domain_id'])
      ->execute();
  }
}

/**
 * Implements hook_domain_delete().
 *
 * On deletion, set the test static to 'deleted'.
 */
function domain_test_domain_delete($domain) {
  domain_test_set('delete');
}

/**
 * Implements hook_domain_cron().
 *
 * We should both receive a $domain array and be setting the active
 * domain to the current $domain, so we can test both here.
 */
function domain_test_domain_cron($domain) {
  $_domain = domain_get_domain();
  if ($_domain['domain_id'] == $domain['domain_id']) {
    domain_test_set($domain['sitename']);
  }
  else {
    domain_test_set('Failed');
  }
}
