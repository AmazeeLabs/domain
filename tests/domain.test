<?php

// $Id$

/**
 * @file
 * Simpletest for Domain Access
 */
class DomainTestCase extends DrupalWebTestCase {

  /**
   * On setup, install our module and create a default domain.
   *
   * @param $list
   *   An optional array of modules to enable.
   */
  public function setUp($list = array()) {
    // Prevent simpletest from vomiting on bootstrap if there
    // are required submodules.
    $modules = _domain_bootstrap_modules();
    module_enable($modules);
    $modules = array_merge($modules, $list);
    parent::setUp($modules);

    // Account for drush and other automated testing to set a proper http value.
    if (empty($_SERVER['HTTP_HOST']) || $_SERVER['HTTP_HOST'] == 'default') {
      $_SERVER['HTTP_HOST'] = 'example.com';
    }
    db_query("TRUNCATE {domain}");
    domain_set_primary_domain();
    db_query("UPDATE {domain} SET sitename = 'TestDomainSitename' WHERE is_default = 1");
    // Create some nodes and users.
    for ($i = 0; $i < 10; $i++) {
      $settings = array(
        'type' => 'page',
        'title' => $this->randomName(32),
        'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
      );
      $this->drupalCreateNode($settings);
      // Using drupalCreateUser runs tests we don't want.
      $edit = array(
        'name' => $this->randomName(32),
        'mail' => $this->randomName(32) . '@example.com',
        'roles' => array(DRUPAL_AUTHENTICATED_RID),
        'status' => 1,
      );
      user_save(NULL, $edit);
    }
  }

  /**
   * Helper function to create domains.
   *
   * @param $subdomains
   *   An array of subdomains to create.
   * @param $base
   *   A base domain string, in the format 'example.com'.
   * @return
   *  An array of created domains.
   */
  public function domainCreateDomains($subdomains = array('one', 'two', 'three'), $base = NULL) {
    $setup = drupal_map_assoc($subdomains);
    $base_domain = $base;
    if (empty($base_domain) && !empty($_SERVER['HTTP_HOST'])) {
      $base_domain = $_SERVER['HTTP_HOST'];
    }
    if (empty($base_domain)) {
      $base_domain = 'example.com';
    }
    $i = 0;
    $domains = array();
    foreach ($setup as $subdomain) {
      $record = array(
        'sitename' => $subdomain,
        'subdomain' => $subdomain . '.' . $base_domain,
        'valid' => 1,
        'is_default' => 0,
        'weight' => $i++,
        'scheme' => 'http',
      );
      $domains[$subdomain] = domain_save($record, $record);
    }
    return $domains;
  }

  public function tearDown() {
    parent::tearDown();
  }

}

class DomainInstallTest extends DomainTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Check install routine',
      'description' => 'Create primary domain record and verify its consistency in the database.',
      'group' => 'Domain Access',
    );
  }
  
  // If the default domain is not in the database, the sitename will be default sitename.
  public function testDomainInstall() {
    $domain = db_query("SELECT sitename FROM {domain} WHERE is_default = 1")->fetch();
    $this->assertTrue($domain->sitename == 'TestDomainSitename', t('Default domain created successfully'));
  }

  // Check the existence of our default grant.
  function testDomainGrantAll() {
    domain_set_default_grant(TRUE);
    $check = db_query_range("SELECT 1 FROM {node_access} WHERE realm = :realm AND gid = :gid", 0, 1,
      array(
        ':realm' => 'domain_all',
        ':gid' => 0,
      )
    )->fetchField();
    $this->assertTrue($check > 0, t('Domain all grant stored correctly !check.', array('!check' => $check)));
  }

  function testDomainEnable() {
    // Delete records so we can test the installer.
    db_query("TRUNCATE {domain_access}");
    db_query("TRUNCATE {domain_editor}");
    // Check nodes.
    $nid = db_query_range("SELECT n.nid FROM {node} n INNER JOIN {domain_access} da ON n.nid = da.nid", 0, 1)->fetchField();
    $this->assertTrue(empty($nid), t('Initial nodes have no domain data.'));
    // Check users.
    $uid = db_query_range("SELECT u.uid FROM {users} u INNER JOIN {domain_editor} de ON u.uid = de.uid", 0, 1)->fetchField();
    $this->assertTrue(empty($uid), t('Initial users have no domain data.'));
    // Run domain_enable.
    domain_enable();
    // Check nodes.
    $nid = db_query_range("SELECT n.nid FROM {node} n INNER JOIN {domain_access} da ON n.nid = da.nid", 0, 1)->fetchField();
    $this->assertTrue(!empty($nid), t('Nodes have added domain data.'));
    // Check users.
    $uid = db_query_range("SELECT u.uid FROM {users} u INNER JOIN {domain_editor} de ON u.uid = de.uid", 0, 1)->fetchField();
    $this->assertTrue(!empty($uid), t('Users have added domain data.'));
  }

}

class DomainCreateTest extends DomainTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Create domains',
      'description' => 'Create random domains and verify consistency in the database.',
      'group' => 'Domain Access',
    );
  }
  
  // Create some domains and verify they match what we expect.
  function testDomainCreate() {
    $setup = $this->domainCreateDomains();
    $result = db_query("SELECT sitename, subdomain FROM {domain} WHERE is_default = 0 ORDER BY weight");
    foreach ($result as $record) {
      $domains[$record->sitename] = array('sitename' => $record->sitename, 'subdomain' => $record->subdomain);
    }
    foreach ($domains as $sitename => $domain) {
      $this->assertTrue($domains[$sitename]['sitename'] == $setup[$sitename]['sitename'], t('Domain %subdomain created successfully', array('%subdomain' => $domain['subdomain'])));
    }
    // Delete one of the domains.
    domain_delete($setup['three']);
    $deleted_domain = domain_lookup($setup['three']['domain_id'], NULL, TRUE);
    $this->assertTrue($deleted_domain == -1, t('Domain %domain deleted successfully.', array('%domain' => $setup['three']['subdomain'])));
  }

}

class DomainHookTest extends DomainTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Test domain hooks',
      'description' => 'Fire domain hooks and test responses.',
      'group' => 'Domain Access',
    );
  }

  // On setup, install our test module.
  function setUp() {
    parent::setUp(array('domain_test'));
  }

  function testDomainHooks() {
    // hook_domain_load() adds 'testvar' => TRUE to the domain array.
    $domain = domain_default(TRUE);
    $this->assertTrue(!empty($domain['testvar']), t('hook_domain_load() fired correctly.'));

    // hook_domain_insert() sets sitename to 'foobar' instead of 'testfoo'.
    $result = $this->domainCreateDomains(array('testfoo'));
    $new_domain = $result['testfoo'];
    $this->assertTrue($new_domain['sitename'] == 'foobar', t('hook_domain_insert() fired correctly.'));

    // hook_domain_update() resaves that domain and set it's sitename back to 'testfoo'.
    $updated_domain = domain_save($new_domain, $new_domain);
    $this->assertTrue($updated_domain['sitename'] == 'testfoo', t('hook_domain_update() fired correctly.'));

    // hook_domain_delete() sets a static value to 'delete' and removes the domain.
    domain_delete($updated_domain);
    $value = domain_test_get();
    $this->assertTrue($value == 'delete', t('hook_domain_delete() fired correctly.'));
    $deleted_domain = domain_lookup($updated_domain['domain_id'], NULL, TRUE);
    $this->assertTrue($deleted_domain == -1, t('Domain deleted successfully.'));
  }

}
