<?php
// $Id$

/**
 * @defgroup domain_prefix Domain Prefix: dynamic table prefixing
 *
 * Allows for the dynamic table prefixing of selected database tables.
 */

/**
 * @file
 * Interface for selective table prefixing for use with Domain Access.
 * For this module to work correctly, you will need to follow the INSTALL.txt
 * instructions for editing your settings.php file.
 *
 * @ingroup domain_prefix
 */

/**
 * Constant definitions for the various actions.
 */
define(DOMAIN_PREFIX_IGNORE, 1);
define(DOMAIN_PREFIX_CREATE, 2);
define(DOMAIN_PREFIX_COPY, 4);
define(DOMAIN_PREFIX_DROP, 8);
define(DOMAIN_PREFIX_UPDATE, 16);

/**
 * Implements hook_menu()
 */
function domain_prefix_menu() {
  $items = array();
  $items['admin/build/domain/prefix'] = array(
    'title' => 'Table prefixing',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer table prefixing'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_prefix_configure_form'),
    'file' => 'domain_prefix.admin.inc',
  );
  $items['admin/build/domain/prefix/%domain'] = array(
    'title' => 'Domain prefix settings',
    'access arguments' => array('administer table prefixing'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_prefix_form', 4),
    'file' => 'domain_prefix.admin.inc',
  );
  $items['domain_prefix_update'] = array(
    'title' => 'Domain prefix update',
    'access arguments' => array('administer table prefixing'),
    'type' => MENU_CALLBACK,
    'page callback' => 'domain_prefix_update',
    'file' => 'domain_prefix.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_perm
 */
function domain_prefix_perm() {
  return array('administer table prefixing');
}

/**
 * Implements hook_theme()
 */
function domain_prefix_theme() {
  $themes = array(
    'domain_prefix_configure_form' => array(
      'arguments' => array('form' => array()),
    ),
  );
  return $themes;
}

/**
 * Implements hook_domaininstall()
 */
function domain_prefix_domaininstall() {
  // If Domain Prefix is being used, check to see that it is installed correctly.
  if (module_exists('domain_prefix') && !function_exists('_domain_prefix_load')) {
    drupal_set_message(t('The Domain Prefix module is not installed correctly.  Please edit your settings.php file as described in <a href="!url">INSTALL.txt</a>', array('!url' => base_path() . drupal_get_path('module', 'domain_prefix') .'/INSTALL.txt')));
  }
}

/**
 * Implements hook_domainlinks()
 *
 * @param $domain
 *  The currently active $domain array, provided by domain_lookup().
 */
function domain_prefix_domainlinks($domain) {
  if (user_access('administer table prefixing')) {
    $links[] = array(
      'title' => t('tables'),
      'path' => 'admin/build/domain/prefix/'. $domain['domain_id']
    );
    return $links;
  }
}

/**
 * Implements hook_domainupdate().
 */
function domain_prefix_domainupdate($op, $domain = array(), &$form_state = array()) {
  // Include the extra functions.
  include_once(drupal_get_path('module', 'domain_prefix') .'/domain_prefix.admin.inc');
  switch ($op) {
    case 'create':
      $rule = variable_get('domain_prefix_options', 1);
      if ($rule) {
        // Get the current settings.
        $settings = unserialize(variable_get('domain_prefix', NULL));
        if (!empty($settings)) {
          $settings['domain_id'] = $domain['domain_id'];
          drupal_execute('domain_prefix_form', $settings, $domain['domain_id'], $form_state['values']['domain_arguments']);
        }
      }
      break;
    case 'delete':
      domain_prefix_drop_records($domain['domain_id']);
      break;
  }
}
