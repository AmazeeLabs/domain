<?php
// $Id$

/**
 * @file
 * Domain Theme module for the Domain Access module group.
 *
 * Originally written by canen; http://drupal.org/user/16188.
 */

/**
 * Implements hook_init()
 *
 * @ingroup drupal
 */
function domain_theme_init() {
  global $_domain, $custom_theme;
  $theme = domain_theme_lookup($_domain['domain_id']);
  $custom_theme = $theme['theme'];
}

/**
 * Implements hook_menu()
 *
 * @ingroup drupal
 */
function domain_theme_menu($may_cache) {
  $items = array();
  if (!$may_cache) {
    $items[] = array(
      'title' => t('Domain theme settings'),
      'path' => 'admin/build/domain/theme',
      'access' => user_access('administer domains'),
      'type' => MENU_CALLBACK,
      'callback' => 'domain_theme_page',
      'callback arguments' => array(arg(4))      
    );    
  }
  return $items;
}

/**
 * The domain theme page callback router.
 *
 * @param $domain_id
 *  The unique identifier for this domain, taken from {domain}.
 *
 * @ingroup theme
 */
function domain_theme_page($domain_id) {
  global $_domain;
  $domain = domain_lookup($domain_id);
  if ($domain['domain_id']) {
    // Ensure we are on the proper domain.
    domain_goto($domain);
    drupal_set_title(t('!site : Domain theme settings', array('!site' => $domain['sitename'])));    
    include_once('domain_theme_form.inc');
    return drupal_get_form('system_themes');
  }
  else {
    return t('Invalid domain request.');
  } 
}

/** 
 * Get domain theme information
 *
 * @param $domain_id
 *  The domain_id taken from {domain}. Optional.
 * @param $theme
 *  The string representation of a {domain_theme} entry. Optional.
 * @param $clear
 *  A boolean flag to clear the static variable if necessary. Not used.  Here for consistency.
 * @return
 *  An array containing the requested row from the {domain_theme} table. 
 *  Returns -1 on failure.
 *
 * @ingroup theme
 */
function domain_theme_lookup($domain_id = NULL, $theme = NULL, $clear = FALSE) {
  if (!is_null($domain_id)) {
    $return = db_fetch_array(db_query("SELECT domain_id, theme, settings FROM {domain_theme} WHERE domain_id = %d", $domain_id));
  }
  else if (!is_null($theme)) {
    $return = db_fetch_array(db_query("SELECT domain_id, theme, settings FROM {domain_theme} WHERE theme= '%s'", $theme));    
  }
  if (empty($return)) {
    $return = -1;
  }
  return $return;
}

/**
 * Implements hook_domainlinks()
 *
 * @ingroup theme
 */
function domain_theme_domainlinks($domain) {
  $links[] = array(
    'title' => t('theme'),
    'path' => 'admin/build/domain/theme/'. $domain['domain_id']
  );
  return $links;
}

/**
 * Implements hook_domainform()
 */
function domain_theme_domainform(&$form) {
  // Set the module weight for Domain Theme,
  $module_weight = variable_get('domain_theme_weight', 0);
  db_query("UPDATE {system} SET weight = %d WHERE name = 'domain_theme' AND type = 'module'", $module_weight);
  
  // Add the form element to the main screen.
  $form['domain_theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Theme settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE  
  );
  $options = drupal_map_assoc(array(-100, -25, -10, -5, -1, 0, 1, 5, 10, 25, 100));
  $form['domain_theme']['domain_theme_weight'] = array(
    '#type' => 'select',
    '#title' => t('Domain Theme execution order'),
    '#options' => $options,
    '#default_value' => $module_weight,
    '#description' => t('If you use other modules that allow custom user or group themes, you may experience conflicts
      with the Domain Theme module.  Use this setting to vary the execution order of the Domain Theme module.  Lower
      (negative) values will execute earlier in the Drupal page building process.')
  );
}