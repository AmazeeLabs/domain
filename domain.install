<?php

/**
 * @file
 * Install file.
 */

/**
 * Implements hook_install().
 */
function domain_install() {
  domain_set_primary_domain();
}

/**
 * Implements hook_schema().
 */
function domain_schema() {
  $schema['domain'] = array(
    'description' => 'The base table for domain records',
    'fields' => array(
      'domain_id' => array('type' => 'serial', 'not null' => TRUE, 'description' => 'Primary key'),
      'subdomain' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '', 'description' => 'Registered DNS entry, will match HTTP_HOST requests'),
      'sitename' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '', 'description' => 'Site display name'),
      'scheme' => array('type' => 'varchar', 'length' => '8', 'not null' => TRUE, 'default' => 'http', 'description' => 'Protocol'),
      'valid' => array('type' => 'varchar', 'length' => '1', 'not null' => TRUE, 'default' => '1', 'description' => 'Active status'),
      'weight' => array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0, 'description' => 'Sort order'),
      'is_default' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Indicates primary domain')),
    'primary key' => array('domain_id'),
    'indexes' => array(
      'subdomain' => array('subdomain'),
      'weight' => array('weight'),
      'is_default' => array('is_default'),
    ),
  );
  $schema['domain_access'] = array(
    'description' => 'Stores domain information for each node',
    'fields' => array(
      'nid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Node id, foreign key to {node}'),
      'gid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'Node access grant id'),
      'realm' => array('type' => 'varchar', 'length' => '255', 'not null' => TRUE, 'default' => '', 'description' => 'Node access realm')),
    'primary key' => array('nid', 'gid', 'realm'),
    'indexes' => array(
      'nid' => array('nid')
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
    ),
  );
  $schema['domain_editor'] = array(
    'description' => 'Stores domain information for each user',
    'fields' => array(
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0, 'description' => 'User id, foreign key to {user}'),
      'domain_id' => array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0, 'description' => 'Domain id, foreign key to {domain}')),
    'primary key' => array('uid', 'domain_id'),
    'foreign_keys' => array(
      'uid' => array('user' => 'uid'),
      'domain_id' => array('domain' => 'domain_id'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function domain_uninstall() {
  $variables = array(
    'domain_behavior',
    'domain_bootstrap_modules',
    'domain_cron_rule',
    'domain_debug',
    'domain_default_source',
    'domain_force_admin',
    'domain_form_elements',
    'domain_grant_all',
    'domain_list_size',
    'domain_paths',
    'domain_search',
    'domain_select_format',
    'domain_seo',
    'domain_vertical_tab',
    'domain_www',
    'domain_xmlrpc_rule',
  );
  if (function_exists('node_type_get_types')) {
    $types = node_type_get_types();
    foreach ($types as $key => $type) {
      $variables[] = 'domain_node_' . $key;
    }
  }
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Update note.
 *
 * Upgrading from Drupal 5 to Drupal 7 is not supported.
 * You must first upgrade to Drupal 6.x.2.3 or higher, and then proceed to Drupal 7.
 *
 */

/**
 * Update block deltas to Drupal 7.
 */
function domain_update_7000() {
  // Get an array of the renamed block deltas, organized by module.
  $renamed_deltas = array(
    'domain' => array(
      '0' => 'switcher',
      '1' => 'information',
    ),
  );
  update_fix_d7_block_deltas($sandbox, $renamed_deltas);
  return t('Domain Access blocks updated.');
}

/**
 * Add sorting to domains.
 */
function domain_update_7001() {
  db_add_field('domain', 'weight', array('type' => 'int', 'unsigned' => FALSE, 'not null' => TRUE, 'default' => 0), array());
  db_add_index('domain', 'weight', array('weight'));
  variable_del('domain_sort');
  return t('Domain sorting added.');
}

/**
 * Add default domain flag and weight the default higher.
 */
function domain_update_7002() {
  db_add_field('domain', 'is_default', array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0), array());
  $default = variable_get('domain_default', 0);
  db_update('domain')
    ->fields(array('is_default' => 1, 'weight' => -1))
    ->condition('domain_id', $default)
    ->execute();
  variable_del('domain_default');
}

/**
 * Add an index on {domain}.is_default.
 */
function domain_update_7003() {
  if (!db_index_exists('domain', 'is_default')) {
    db_add_index('domain', 'is_default', array('is_default'));
  }
}

/**
 * Remove the zero record from the database.
 */
function domain_update_7300() {
  // We grab the default domain, remove it from the database, and
  // then re-save it into the table, using the new value as the default domain.
  $default = db_query("SELECT * FROM {domain} WHERE domain_id = 0")->fetchAssoc();
  if (empty($default)) {
    return t('Domain Access did not find an existing domain 0. No updates required.');
  }
  db_delete('domain')
    ->condition('domain_id', 0)
    ->execute();
  unset($default['domain_id']);
  drupal_write_record('domain', $default);

  // Write to other tables using our foreign key.
  $schema = drupal_get_schema();
  foreach ($schema as $table => $data) {
    if (isset($data['fields']['domain_id']) && $data['fields']['domain_id']['type'] == 'int') {
      db_update($table)
        ->fields(array('domain_id' => $default['domain_id']))
        ->condition('domain_id', 0)
        ->execute();
    }
  }
  // Update other tables that use a domain_id realm.
  db_update('domain_access')
    ->fields(array('gid' => $default['domain_id']))
    ->condition('gid', 0)
    ->condition('realm', 'domain_id')
    ->execute();
  db_update('node_access')
    ->fields(array('gid' => $default['domain_id']))
    ->condition('gid', 0)
    ->condition('realm', 'domain_id')
    ->execute();
  // Remove the old variables.
  variable_del('domain_root');
  variable_del('domain_sitename');
  variable_del('domain_scheme');
  // Update message.
  return t('Domain Access updated successfully');
}
